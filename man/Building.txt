§ 1 - PREFACE

  Because this project uses CMake, building the Carbon kernel is now
  trival. Only a handful of prerequisites are assumed to be installed
  on the host. 
    - clang
    - llvm
    - cmake
    - make
    - optionally, qemu

  A POSIX-compliant system is required. On Windows this can be achieved
  with the Windows subsystem for Linux. The macOS and most Linux distros
  will work OOTB. 

§ 2 - THE BUILD

§ 2.1 - Bootstrap

To build, it is assumed you stay in the source root directory. Type

  "sh ./conf"

to bootstrap the makefiles using CMake. This will create a directory
called "build" if it wasn't created already, which will be used to
hold the built binaries.

§ 2.2 - Build

Once the build system has been bootstrapped, a simple

  "make"

will suffice to build and reconfigure on the fly. To remove all binaries,
simply type

  "make clean".

To add and remove the configuration, type in

  "make conf"
  "make deconf"

respectively. Note that "deconf" will remove the top-level Makefile. You
will have to run the command from section §2.2 again to create it.

§ 3 - DEBUG

The debugging process is as easy as building. Simply type

  "make run"

to start a local QEMU session. It will make use of it's built-in "-kernel"
flag to run the kernel, so no CD-ROM images are required.
If you wish to debug the OS on real hardware, you should do so using
Grub 2 (https://www.gnu.org/software/grub/) or Limine
(https://limine-bootloader.org). Both support the multiboot format, though
Grub 2 sees more widespread use.